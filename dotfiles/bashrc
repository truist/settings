# shellcheck disable=SC2139

# SCRIPT PROFILING
# PS4='+ $(/opt/homebrew/bin/gdate "+%s.%N")\011 '
# exec 3>&2 2>/tmp/bash_startup_time.$$.log
# set -x
# FIND THE SLOW-RUNNING STEPS WITH THIS:
#   cat /tmp/bash_startup_time.$$.log | grep '++' | awk 'NR==1 {prev=$2; print} NR>1 {diff=$2-prev; if (diff >= 0.1) print diff, $0; prev=$2}'

if [[ $(/usr/bin/id -u) -eq 0 ]] && [ -d /root ] && [ -n "$(find /root -user "root" -print -prune -o -prune 2>/dev/null)" ]; then
	export HOME=/root
elif [[ $(/usr/bin/id -u) -eq 0 ]] && [ -d /var/root ] && [ -n "$(find /var/root -user "root" -print -prune -o -prune 2>/dev/null)" ]; then
	export HOME=/var/root
fi

if [[ -z "$WORKHOME" ]]; then
	WORKHOME="$HOME"
	export WORKHOME
fi

XDG_CONFIG_HOME="$WORKHOME/.config"
export XDG_CONFIG_HOME

_check_path_ownership() {
	if [ -f "$1" ] || [ -d "$1" ]; then
		if [ -n "$(find "$1" -user "$2" -print -prune -o -prune 2>/dev/null)" ]; then
			true
		else
			# shellcheck disable=SC2012
			PATHOWNER="$(ls -ld "$1" | awk '{print $3}')"
			echo "WARNING: $1 exists and is owned by $PATHOWNER; we want it to be owned by $2 (and you are $(whoami) / $(id -u))"
			false
		fi
	else
		false
	fi
}

ORIG_PATH=$PATH
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R7/bin:/usr/X11R6/bin
# put this on first (i.e. near the end of PATH), so even if it's a mess, everything else will override it
PATH=/usr/local/bin:/usr/local/sbin:${PATH}

# snap packages
if _check_path_ownership /snap/bin root ; then
	PATH=/snap/bin:${PATH}
fi
# pkgin on osx, probably
if _check_path_ownership /opt/pkg/bin root ; then
	PATH=/opt/pkg/bin:/opt/pkg/sbin:${PATH}
fi
# standard pkgsrc
if _check_path_ownership /usr/pkg/bin root ; then
	PATH=/usr/pkg/bin:/usr/pkg/sbin:${PATH}
fi
# user-specific pkgsrc
if _check_path_ownership "$WORKHOME/pkg/bin" "$(id -u)" ; then
	PATH=$WORKHOME/pkg/bin:$WORKHOME/pkg/sbin:${PATH}
fi

brewuser() {
	BREWROOT="$1"
	# shellcheck disable=SC2012
	BREWOWNER="$(ls -ld "$BREWROOT/bin/brew" | awk '{print $3}')"
	echo "WARNING: brew is owned by '$BREWOWNER'; setting up brew sudo alias for $BREWROOT/bin" >&2
	PATH=$BREWROOT/bin:$BREWROOT/sbin:${PATH}
	alias brew="sudo -Hu '$BREWOWNER' $BREWROOT/bin/brew"
}
if _check_path_ownership "/opt/homebrew/bin/brew" "$(id -u)" ; then
	# ARM homebrew, current user
	eval "$(/opt/homebrew/bin/brew shellenv)"
elif _check_path_ownership "/usr/local/bin/brew" "$(id -u)" ; then
	# Intel homebrew, current user
	eval "$(/usr/local/bin/brew shellenv)"
elif command -v brew >/dev/null ; then
	# who knows?
	echo "WARNING: brew is installed somewhere unexpected ($(command -v brew)); not setting it up" >&2
elif [ -x /opt/homebrew/bin/brew ]; then
	# ARM homebrew, some other user
	brewuser '/opt/homebrew'
elif [ -x /usr/local/bin/brew ]; then
	# Intel homebrew, some other user
	brewuser '/usr/local'
fi

if command -v pyenv >/dev/null ; then
	eval "$(pyenv init - --no-rehash bash)"
	if pyenv help | grep -q virtualenvs >/dev/null ; then
		eval "$(pyenv virtualenv-init -)" # SLOW

		# from https://gist.github.com/nolar/ba60ad1c0df936d7b1cd1f708039f337
		# This is a replacement hook for the pyenv-virtualenv, which triggers only on demand,
		# and stays inactive on other cases -- to save the time on prompt generation.
		__pyenv_local_file=.python-version
		__pyenv_mtime_file=/tmp/pyenv.mtime
		__pyenv_last_cwd=
		_pyenv_virtualenv_hook_cached ()
		{
			local ret=$?;
			if [[
				( "$__pyenv_last_cwd" != "$PWD" ) ||
				( ! -e "$__pyenv_local_file" && -e "$__pyenv_mtime_file" ) ||
				( -e "$__pyenv_local_file" && ! -e "$__pyenv_mtime_file" ) ||
				( "$__pyenv_local_file" -nt "$__pyenv_mtime_file" )
			]] ; then

				# Call the actual hook.
				if [[ ( -n "$__pyenv_last_cwd" ) || -e "$__pyenv_local_file" ]]; then
					_pyenv_virtualenv_hook "$@"
				fi

				# Store the new stage as the last known, for future checks.
				__pyenv_last_cwd="$PWD"
				if [[ -e "$__pyenv_local_file" ]] ; then
					touch -r "$__pyenv_local_file" "$__pyenv_mtime_file"
				else
					rm -f "$__pyenv_mtime_file"
				fi
			fi
			return $ret
		}
		PROMPT_COMMAND="${PROMPT_COMMAND//_pyenv_virtualenv_hook;/_pyenv_virtualenv_hook_cached;}"

		# Make it clear when the virtualenv is changed, and when it is cached.
		# export PYENV_VIRTUALENV_VERBOSE_ACTIVATE=yes


		function pylint() {
			PYENV_VERSION=global-pylint command pylint "$@"
		}
	else
		alias pylint="pylint --rcfile '$WORKHOME/.pylintrc'"
	fi
fi

if _check_path_ownership "$WORKHOME/.cargo/bin" "$(id -u)" ; then
	PATH=$WORKHOME/.cargo/bin:${PATH}
fi

if uname | grep -E ^MINGW > /dev/null ; then
	PATH=${PATH}:$ORIG_PATH
fi
# both WORKHOME and HOME, in case they are different (in which case we want both)
PATH=$WORKHOME/bin:$HOME/bin:${PATH}
export PATH

VIMINIT="source $WORKHOME/.vimrc"
export VIMINIT

# also add these two lines to /root/.profile (for e.g. 'sudo -i crontab -e')
export EDITOR=vim
alias vi=vim

alias ls='ls -F'

export PAGER=less
alias less='less -R -X'
# alias ag="ag --path-to-ignore '$WORKHOME/.agignore' --pager 'less -R -X' --follow"
alias ag="ag --path-to-ignore '$WORKHOME/.agignore' --pager 'less -R -X'"
alias fd='fd -c never'

vimpipe() {
	xargs -o vim
}
agvim() {
	ag -l0 "$@" | xargs -0o vim
}
fdvim() {
	fd -0 "$@" | xargs -0o vim
}
dark() {
	osascript -e 'tell application "Terminal"' -e 'set current settings of selected tab of front window to settings set "Pro"' -e 'end tell'
	export DELTA_FEATURES=dark
}
export -f dark
light() {
	osascript -e 'tell application "Terminal"' -e 'set current settings of selected tab of front window to settings set "Novel"' -e 'end tell'
	export DELTA_FEATURES=light
}
export -f light

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias cdp=". $WORKHOME/bin/cdp"
if [[ -x "$WORKHOME/bin/enable_signing" ]]; then
	alias enable_signing=". $WORKHOME/bin/enable_signing"
fi

# http://www.shellperson.net/using-sudo-with-an-alias/   (fixes "sudo vi <whatever>" not using vim)
alias sudo='sudo '

alias notify='tput bel'

alias rbash='arch -x86_64 /bin/bash --login'

command -v grunt > /dev/null && alias grunt="grunt --stack"

export HISTCONTROL=erasedups
export HISTSIZE=10000
export HISTIGNORE="clear:bg:fg:cd:cd -:exit:date:w:pwd"
# Append to the history file when exiting instead of overwriting it
shopt -s histappend
# type something then hit up/down to search history that matches what you already have
if tty -s; then
	bind '"\e[A": history-search-backward'
	bind '"\e[B": history-search-forward'
fi

if command -v starship >/dev/null ; then
	eval "$(starship init bash)"
elif [ -f "$WORKHOME/.prompt_spec" ]; then
	. "$WORKHOME/.prompt_spec"
elif [[ $(/usr/bin/id -u) -eq 0 ]]; then
	# red
	export PS1="\[\e[0;31m\][\u@\h \W]$ \[\e[m\]"
else
	# green
	export PS1="\[\e[0;32m\][\u@\h \W]$ \[\e[m\]"
fi

if type brew &>/dev/null ; then
	HOMEBREW_PREFIX="$(brew --prefix)"
	if [[ -r "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
		source "${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
	else
		for COMPLETION in "${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
			[[ -r "${COMPLETION}" ]] && source "${COMPLETION}"
		done
	fi
fi

GIT_CONFIG_GLOBAL="$WORKHOME/.gitconfig"
export GIT_CONFIG_GLOBAL
if [ -f "$WORKHOME/.git-completion.bash" ]; then
	. "$WORKHOME/.git-completion.bash"
fi

# mosh sets this to en_US.UTF-8, which makes perl angry, so do this on mosh servers, if necessary
#unset LANG

export PERL_CPANM_OPT="-v -S"

if ( command -v tty >/dev/null ) && ( tty -s ) && [ -x /usr/games/fortune ]; then
	/usr/games/fortune
fi

export SLIDESDIR="$WORKHOME/src/reveal.js/slides"
if [ -d "$SLIDESDIR" ]; then
	_slidesComplete() {
		local files=("$SLIDESDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _slidesComplete slides
fi

# see https://github.com/rupa/z
ZPATH=$WORKHOME/src/z/z.sh
if [ -e $ZPATH ]; then
	# shellcheck disable=SC1090
	. $ZPATH
fi

export BASH_SILENCE_DEPRECATION_WARNING=1

if command -v direnv >/dev/null ; then
	eval "$(direnv hook bash)"
fi

export FIGNORE=DS_Store

export NOTEDIR="$WORKHOME/iCloud/Scratch"
if [ -d "$NOTEDIR" ]; then
	_noteComplete() {
		local files=("$NOTEDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _noteComplete note
fi

export PERSONDIR="$NOTEDIR/person"
if [ -d "$PERSONDIR" ]; then
	_personComplete() {
		local files=("$PERSONDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _personComplete person
fi

export MEETDIR="$NOTEDIR/meeting"
if [ -d "$MEETDIR" ]; then
	_meetComplete() {
		local files=("$MEETDIR/$2"*)
		[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
	}
	complete -o bashdefault -o default -o filenames -F _meetComplete meet
fi

_dropboxComplete() {
	DROPBOXDIR="/Volumes/DropBoxes"
	if [ ! -d "$DROPBOXDIR" ]; then
		dropbox
	fi
	local files=("$DROPBOXDIR/$2"*)
	[[ -e ${files[0]} ]] && COMPREPLY=( "${files[@]##*/}" )
}
complete -o bashdefault -o default -o filenames -F _dropboxComplete dropbox

warn_if_missing() {
	which "$1" >/dev/null 2>&1 || echo "$1 is not installed" >&2
}

if [ -z "$DISABLE_MISSING_TOOLS_WARNINGS" ]; then
	for tool in ag fd starship ; do
		warn_if_missing $tool
	done
fi


# Created by `pipx` on 2024-07-23 21:20:31
export PATH="$PATH:/Users/narthur/.local/bin"


# script profiling
# set +x
# exec 2>&3 3>&-
# unset PS4

