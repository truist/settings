" ensure autocmd's don't get defined twice
autocmd!

if empty($WORKHOME)
	let $WORKHOME = $HOME
endif

" reload changes automatically when saved
autocmd! bufwritepost $WORKHOME/.vimrc source $WORKHOME/.vimrc

set nocompatible

set runtimepath+=$WORKHOME/.vim

if has("multi_byte")
	if &termencoding == ""
		let &termencoding = &encoding
	endif
	set encoding=utf-8
	setglobal fileencoding=utf-8
	"setglobal bomb
	set fileencodings=ucs-bom,utf-8,latin1
endif

" pathogen (https://github.com/tpope/vim-pathogen)
source $WORKHOME/.vim/bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect(expand("$WORKHOME/.vim/bundle/{}"))
Helptags

"general ui
set showmatch
set ruler
set showmode
"show e.g. number of lines selected
set showcmd
set title
" turn off beeps and flashes
set vb
set t_vb=
" margin while scrolling
set scrolloff=3
set showtabline=1

" different cursor appearance in Insert mode
let &t_SI.="\e[5 q"
let &t_SR.="\e[4 q"
let &t_EI.="\e[1 q"
autocmd InsertEnter * set cul
autocmd InsertLeave * set nocul

" Persistent undo
let undodir = expand('$WORKHOME/.vim/undo')
if !isdirectory(undodir)
	call mkdir(undodir)
endif
set undodir=$WORKHOME/.vim/undo//
set undofile " Create FILE.un~ files for persistent undo

" Keep swp files out of working directories
let swapdir = expand('$WORKHOME/.vim/swap')
if !isdirectory(swapdir)
	call mkdir(swapdir)
endif
set directory=$WORKHOME/.vim/swap//

" search settings
set incsearch
set ignorecase
set smartcase
set hlsearch
"clear search highlighting by hitting enter
nnoremap <cr> :noh<CR><CR>:<backspace>

if has('mouse')
	set mouse=a
	" use with <alt> or <fn> on OSX; set cursor position; scroll
endif

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
	\ if line("'\"") > 1 && line("'\"") <= line("$") |
	\   exe "normal! g`\"" |
	\ endif

set background=dark
" syntax highlight and indentation settings
syntax on
set autoindent
filetype plugin indent on
" 'cindent' has terrible behavior in .txt files after ()
set smartindent
" make the backspace key work with autoindent
set backspace=indent,eol,start
" indent/unindent selected lines in visual mode
vmap <tab> >gv
vmap <s-tab> <gv
" if wrap is turned on, we want these setttings
set linebreak
set nolist
" prevent hard-wrapping
set textwidth=0 wrapmargin=0
" turn off all code folding
autocmd BufRead,BufNewFile * set nofoldenable

" start using buffers the way they were meant to be used
set hidden

" hybrid relative and absolute number for current line;
" if v:version <= 703, we only get 'relativenumber'
"set number
"set relativenumber
highlight LineNr cterm=NONE ctermfg=Grey ctermbg=NONE
highlight CursorLineNr cterm=NONE ctermfg=Yellow ctermbg=NONE

" Don't mark URL-like things as spelling errors
" From http://www.panozzaj.com/blog/2016/03/21/ignore-urls-and-acroynms-while-spell-checking-vim/
" PUT THESE IN ~/.vim/after/syntax/{text,markdown}.vim
" syn match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
" syn match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell

" type identification help
autocmd BufRead,BufNewFile *.t setfiletype perl
" make this explicit so the markdown plugin doesn't take it
autocmd BufRead,BufNewFile *.mdwn setfiletype ikiwiki
autocmd BufRead,BufNewFile *.md setfiletype markdown
autocmd BufRead,BufNewFile *.json setfiletype javascript syntax=javascript
autocmd BufRead,BufNewFile Jenkinsfile* setfiletype groovy
autocmd BufRead,BufNewFile *.rs setfiletype rust

" defaults
autocmd BufRead,BufNewFile * setlocal tabstop=4 shiftwidth=4 softtabstop=4

" type-specific settings
autocmd FileType text setlocal wrap spell spellcapcheck=
autocmd FileType javascript setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType perl setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType groovy setlocal noexpandtab
autocmd FileType mkd setlocal expandtab spell
autocmd FileType markdown setlocal expandtab spell
autocmd FileType ikiwiki setlocal expandtab spell
autocmd FileType cpp setlocal nowrap
autocmd FileType cmake setlocal nospell

" ctrl-f to take first suggested correction for last spelling error
imap <c-f> <c-g>u<Esc>[s1z=`]a<c-g>u
nmap <c-f> [s1z=<c-o>

" highlight text past 100 columns, for these types
"autocmd BufWinEnter *.t let w:m2=matchadd('Search', '\%>100v.\+', -1)
"autocmd BufWinEnter *.p? let w:m2=matchadd('Search', '\%>100v.\+', -1)
"autocmd BufWinEnter *.sh let w:m2=matchadd('Search', '\%>100v.\+', -1)
"if (exists('+colorcolumn'))
	"set colorcolumn=80
	"highlight ColorColumn ctermbg=233
"endif

" sudo write
ca w!! w !sudo tee >/dev/null "%"

" make vim's clipboard use the system clipboard by default (needs testing on non-OSX)
set clipboard=unnamed

" shortcuts for paste mode in normal and insert modes
" DON'T REMEMBER WHAT THIS DOES, AND IT CAUSES A ONE-SECOND DELAY AFTER
" HITTING :
"nnoremap  :set invpaste paste?<CR>
"set pastetoggle=

" don't use the arrow keys
" noremap <Up> <NOP>
" noremap <Down> <NOP>
" noremap <Left> <NOP>
" noremap <Right> <NOP>

let mapleader = ","

" shortcut to switch background setting
nnoremap <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR> )
" shortcut to switch to light mode
nnoremap <Leader>l :execute '!light' \| :set bg=light \| set colorcolumn= \| highlight clear SignColumn \| set wrap \| AirlineTheme papercolor<CR>
" and back to dark mode
nnoremap <Leader>d :execute '!dark' \| :set bg=dark \| set colorcolumn= \| highlight clear SignColumn \| set nowrap \| AirlineTheme dark<CR>


" shortcuts to comment/uncomment lines
" (also try `gcl`, from a plugin)
nnoremap <Leader># :s/^/#<CR><CR>
nnoremap <Leader>## :s/^#<CR><CR>

" shortcuts to bullet/unbullet (markdown) lines
nnoremap <Leader>* :s/^\s*/* <CR><CR>
nnoremap <Leader>** :s/^* <CR><CR>

" shortcut to toggle wrapping
nnoremap <Leader>w :set wrap!<cr>

" shortcut to toggle spell check
nnoremap <Leader>s :set spell!<cr>

" Scrum Mate card lookup
nnoremap <leader>o :execute '!open http://slacklist.paceap.com:8080/hubot/scrummate/' . expand('<cWORD>')<CR><CR>

" abandon vim-open-url in favor of 'gx'
noremap <Leader>u :echo "Try 'gx' instead"<CR>

" table-mode
let g:table_mode_corner='|'

" yankstack
let g:yankstack_map_keys = 0
nmap π <Plug>yankstack_substitute_older_paste
nmap ∏ <Plug>yankstack_substitute_newer_paste

" vim-gitgutter
highlight clear SignColumn
set updatetime=250
let g:gitgutter_max_signs = 1000

" airline
set noshowmode
let g:airline_powerline_fonts = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#hunks#enabled = 0
" fixes slowness while a search is active, in big files
let g:airline#extensions#searchcount#enabled = 0

" fix line-length display (`col(".")`)
let g:airline_section_z = '%p%%%#__accent_bold#%{g:airline_symbols.linenr}%l%#__restore__#%#__accent_bold#/%L%{g:airline_symbols.maxlinenr}%#__restore__#%#__accent_bold#%{g:airline_symbols.colnr}%{col(".")}%#__restore__#'
let g:airline_section_z = '%l/%L:%{col(".")}'

" Supertab
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabMidWordCompletion = "0"

" minibufexplorer
map <Leader>b :MBEFocus<cr>

function! SetPythonHostProg()
	let pyenv_python = system('pyenv which python3')
	if v:shell_error == 0
		let g:python3_host_prog = trim(pyenv_python)
	endif
endfunction
autocmd BufEnter * call SetPythonHostProg()

" linters
let g:ale_linters_explicit = 1
" let g:ale_python_pylint_executable = 'pylint'
let g:ale_linters = {
\   'javascript': ['standard'],
\   'perl': ['perl'],
\   'php': ['php'],
\   'powershell': ['powershell'],
\   'rust': ['analyzer'],
\   'sh': ['shellcheck'],
\   'python': ['pylint'],
\}
let g:ale_fixers = {'javascript': ['standard']}
nmap <silent> [l <Plug>(ale_previous_wrap)
nmap <silent> ]l <Plug>(ale_next_wrap)
set completeopt=menu,menuone,preview,noselect,noinsert
let g:ale_completion_enabled = 1
nnoremap <C-LeftMouse> :ALEGoToDefinition<CR>

let g:rustfmt_autosave = 1

" editorconfig + fugitive
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" CtrlP
let g:ctrlp_custom_ignore = { 'dir': '\v[\/](node_modules|playground|generated|client/build|thirdPartyLibs)$' }
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_max_files = 0

" vim-better-whitespace
let g:better_whitespace_ctermcolor='brown'
" highlight ExtraWhitespace ctermbg=brown
let g:better_whitespace_filetypes_blacklist=['c', 'cpp', 'h']
let g:show_spaces_that_precede_tabs=1

" lexima.vim
let g:lexima_enable_basic_rules = 0
"
" vim-powered terminal in split window
map <Leader>t :below term<cr>
tmap <Leader>t <c-w>:below term<cr>
" vim-powered terminal in new tab
map <Leader>T :tab term<cr>
tmap <Leader>T <c-w>:tab term<cr>

" make the tmux status line show the currently-edited file
if &term == "screen" || &term == "screen-256color"
	set t_ts=
endif
"if &term == "screen" || &term == "screen-256color" || &term == "xterm" || &term == "xterm-color" || &term == "xterm-256color"
	set title
"endif
autocmd BufEnter * let &titlestring = "vim " . expand("%:h") . "/" . expand("%:t")

" fix backspace under tmux on netbsd
if &term == "screen-256color"
	set t_kb=
endif



" these aren't currently safe (on VIM <8.2.something)
set nomodeline
set modelines=0

