# Reference this file from your ~/.gitconfig like so:
#[include]
#	path = path/to/this/file

[user]
# set these in your ~/.gitconfig
#	name = Your Name
#	email = your@email

[alias]

	# frequently-used verbs that should exist and/or give more information
	branches = "!f() { git -c color.ui=always branch -a -vv | sed -E 's/^(..([[:cntrl:]]\\[[0-9]{1,3}m)?[^[:space:]]+[[:space:]]*[[:cntrl:]]\\[m )(-> [^[:space:]]+)?([^[:space:]]{6,} )?(\\[.+\\])?.*$/\\1\\3\\5/' ; }; f"
	cam = commit -a -m
	remotes = remote -v
	st = status -s
	ss = submodule status
	su = submodule update
	submodules = submodule status
	sync = "!f() { git pull && git push ; }; f"
	tags = for-each-ref --format='%(color:blue)%(taggerdate:short) %(objectname:short)->%(color:green)%(*objectname:short) %(*creatordate:short)%(committerdate:short) %(color:reset)%(refname:short)' --sort='*creatordate' refs/tags
	wdiff = diff --color-words
	wshow = show --color-words

	# workspace management
	cleanall = clean -d -x -f -f  # careful with this one!  # two -f to make it delete unexpected nested git repos
	ignored = status --ignored -s
	undo-commit = reset --soft HEAD^
	unedit = checkout HEAD --
	unstage = reset --
	untrack = rm --cached

	# history examination
	blamelines = "!f() { git log -L \"$2,$3:./$GIT_PREFIX/$1\" HEAD ; }; f"  # pass it three args: filename, starting line number, ending line number
	contributors = shortlog --summary --numbered
	graph = log --color --graph --date=short --pretty='format:%C(red)%h %C(yellow)%d%C(reset) %<(70,trunc)%s %C(green)%an, %ad%C(reset)'
	graphm = log --color --graph --date=short --pretty='format:%C(red)%h %C(yellow)%d%C(reset) %s  %C(green)%an, %ad%C(reset)%n%b'
	graphs  = log --oneline --graph --decorate --color
	search = "!f() { git log -p -G\"$1\" -i ; }; f"  # search the commit history for changes matching the search term

	# rare but handy
	branch-name = !git symbolic-ref --short HEAD
	branch-point = !bash -c 'git log -1 --pretty=format:%h $(git rev-parse $(git rev-list --exclude-first-parent-only ^"${1:-master}" "${2:-HEAD}" | tail -1)^ )' -    # https://stackoverflow.com/a/71193866/1132502
	branch-point-graph = !bash -c 'git graph "${1:-master}" "${2:-HEAD}" | less -R +/$(git branch-point "$1" "$2")' -
	branch-point-branches = !bash -c 'git branch --contains $(git branch-point "$1" "$2")' -  # all the branches that contain the branch-point commit
	camend = commit --amend --no-edit  # for when you haven't set your username and email yet
	conflicts = diff --name-only --diff-filter=U --relative
	delete-remote-branch = push -d
	dump = cat-file -p  # dump out the raw contents of a particular file, typically a deleted one at an earlier revisions, with e.g. git dump <sha>:<file>
	fetch-file = !git-fetch-file.sh
	hash = rev-parse --short=9 --default HEAD  # useful for scripts
	missing-submodule-refs = "!find_missing_submodule_refs.sh"
	move-local-branch-pointer = "!f() { git update-ref -m \"Reset $1 to $2\" refs/heads/$1 $2; }; f"
	prune-stale-branches = "!f() { git remote prune origin ; git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -d $@ ; }; f"  # prunes local branches that have disappeared from the remote
	root-commits = fsck --root
	# root-commits = rev-list --max-parents=0 HEAD
	set-upstream = !git branch --set-upstream-to=origin/`git branch-name`
	stashpull = "!f() { git stash && git pull && git stash pop ; }; f"
	trackedignored = ls-files -i -c --exclude-standard	 # find files that are .gitignore'd but are already tracked

[branch]
	# sort = -committerdate
	#autosetuprebase = always

[color]
	ui = true
[color "diff"]
	meta = yellow

[commit]
	verbose = true

[core]
# uncomment these on windows
#	autocrlf = true
#	fscache = true
#	symlinks = true
	excludesfile = ~/.gitignore
	longpaths = true
	pager = less -i -S

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

# pick one of these, depending on OS
#[credential]
#	helper = cache
#	helper = osxkeychain
#	helper = manager

[fetch]
	prune = true
	# pruneTags = true
	# all = true
	recurseSubmodules = on-demand

[log]
	date = iso

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = vimdiff

[pull]
	rebase = true

[push]
	default = current
	autoSetupRemote = true
	followTags = true

# also see https://github.com/git/git/blob/master/contrib/rerere-train.sh
[rerere]
	enabled = false

[diff]
	algorithm = histogram
	mnemonicPrefix = true
	renames = true
	submodule = log

[status]
	submoduleSummary = true

# SUPER-DANGEROUS
# WILL SILENTLY DELETE LOCAL CHANGES IN SUBMODULES, WHEN YOU SWITCH AWAY FROM A BRANCH WITH A SUBMODULE
#[submodule]
#	recurse = true

[advice]
	pushNonFFCurrent = false

[init]
	defaultBranch = main

[notes]
	displayRef = refs/notes/*
[remote "origin"]
	fetch = +refs/notes/*:refs/notes/*

[help]
	autocorrect = prompt

[rebase]
	# autoSquash = true
	# autoStash = true
	updateRefs = true

### 'delta' diff tool
[core]
	pager = delta

[interactive]
	diffFilter = delta --color-only

[include]
	path = ~/src/delta/themes.gitconfig

[delta]
	navigate = true
	features = dark
	line-numbers = true
	side-by-side = false

[merge]
	conflictstyle = zdiff3

[diff]
	colorMoved = default

[delta "dark"]
	features = chameleon hunk-header

[delta "light"]
	features = hoopoe hunk-header

[delta "hunk-header"]
	hunk-header-style = syntax



