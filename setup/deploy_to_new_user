#!/usr/bin/env bash

set -eu

REALHOME="$HOME"
	SETTINGS="$REALHOME/src/settings"
		DOTFILES="$SETTINGS/dotfiles"
			SPECIALS="$DOTFILES/specials"
		BINFILES="$SETTINGS/bin"
		SETUPFILES="$SETTINGS/setup"

if [ ! -d "$SETTINGS" ]; then
	echo "$SETTINGS is missing - please clone from github.com/truist/settings" >&2
	exit 1
fi

if [[ -n "${1-}" ]]; then
	if [[ '--temp' == "$1" ]]; then
		WORKHOMES="$SETTINGS/workhome"
		WORKHOME="$WORKHOMES/$(id -un)"
		mkdir -p "$WORKHOME"
		if [ ! -d "$WORKHOME" ]; then
			echo "$WORKHOME must be a directory" >&2
		fi
		echo "Deploying into: $WORKHOME"

		mkdir -p "$REALHOME/bin"
		ln -sf "$BINFILES/nbash" "$REALHOME/bin/"
	else
		echo "args: [--temp]" >&2
		exit 1
	fi
else
	WORKHOME="$HOME"
fi

#################

main() {
	do_dotfiles

	do_bin_scripts

	echo "vim plugins..."
	"$SETUPFILES/vim-pathogen" "$WORKHOME"

	if [[ "$WORKHOME" == "$REALHOME" && "$(uname)" == 'Darwin' ]]; then
		echo
		echo "OSX configuration..."
		cd "$REALHOME"
		"$SETUPFILES/configure_osx"
		echo "Reminder to install homebrew, then 'brew bundle --file $SETUPFILES/Brewfile'"
	fi

	mkdir -p "$WORKHOME/src"
	cd "$WORKHOME/src"
	if [ ! -e 'z' ]; then
		echo
		echo "z..."
		git clone https://github.com/rupa/z
	fi

	if [ ! -e 'fonts' ]; then
		echo
		echo "powerline fonts..."
		git clone https://github.com/powerline/fonts
		echo
		echo "Reminder to install ~/src/fonts/SourceCodePro"
	fi

	if [ "$(vim --version | grep -c '+clipboard')" -ne 1 ]; then
		echo "WARNING: vim is not compiled with +clipboard support" >&2
	fi

	echo
	echo "done!"
}

do_dotfiles() {
	echo "dotfiles..."

	cd "$DOTFILES"
	files=(*)

	cd "$WORKHOME"
	for nodotfile in "${files[@]}" ; do
		if [ -f "$DOTFILES/$nodotfile" ]; then
			link_file "$DOTFILES/$nodotfile" ".$nodotfile"
		fi
	done

	do_special_dotfiles
}

do_special_dotfiles() {
	cd "$WORKHOME"

	# ssh UseRoaming
	nodotfile="ssh_config"
	sshdir=".ssh"
	mkdir -p "$sshdir"
	chmod 700 "$sshdir"
	clear_file "$sshdir/config"
	cat "$SPECIALS/$nodotfile" >> "$sshdir/config"

	# lvim light.script
	vimdir=".vim"
	mkdir -p "$vimdir"
	nodotfile="light.script"
	clear_file "$vimdir/$nodotfile"
	cd "$vimdir"
	link_file "$SPECIALS/$nodotfile" "$nodotfile" >/dev/null
	cd - >/dev/null

	# starship.toml
	configdir=".config"
	mkdir -p "$configdir"
	nodotfile="starship.toml"
	clear_file "$configdir/$nodotfile"
	cd "$configdir"
	link_file "$SPECIALS/$nodotfile" "$nodotfile" >/dev/null
	cd - >/dev/null

	# htoprc
	nodotfile="htoprc"
	htopdir="$configdir/htop"
	mkdir -p "$htopdir"
	clear_file "$htopdir/$nodotfile"
	cd "$htopdir"
	link_file "$SPECIALS/$nodotfile" "$nodotfile" >/dev/null
	cd - >/dev/null

	# gitconfig
	nodotfile="gitconfig"
	dotfile=".$nodotfile"
	clear_file "$dotfile"
	cat << EOF > "$dotfile"
[include]
	path = ${SPECIALS/#$HOME/~}/$nodotfile
EOF

	# .gitconfig for older git versions
	xdg_git="$configdir/git"
	mkdir -p "$xdg_git"
	clear_file "$xdg_git/config"
	cd "$xdg_git"
	link_file "../../.gitconfig" "config" >/dev/null
	cd - >/dev/null
}

do_bin_scripts() {
	echo "bin scripts..."

	cd "$WORKHOME"

	bindir="bin"
	mkdir -p "$bindir"

	cd "$BINFILES"
	files=(*)

	cd "$WORKHOME/$bindir"
	for binfile in "${files[@]}" ; do
		if [ -f "$BINFILES/$binfile" ]; then
			link_file "$BINFILES/$binfile" "$binfile"
		fi
	done
}

link_file() {
	src="$1"
	dest="$2"
	clear_file "$dest"
	ln -s "$src" "$dest"
}

clear_file() {
	thefile="$1"
	echo "  $thefile"
	if [ -e "$thefile" ] || [ -L "$thefile" ]; then
		if [ -f "$thefile" ] || [ -L "$thefile" ]; then
			mv "$thefile" "${thefile}.prior"
		else
			echo "error: $thefile exists and is not a file or symlink" >&2
			exit 1
		fi
	fi
}

main

